diff --git a/src/Controller/ExportController.php b/src/Controller/ExportController.php
index c1504b9..2736efa 100644
--- a/src/Controller/ExportController.php
+++ b/src/Controller/ExportController.php
@@ -21,21 +21,38 @@ class ExportController {
   /**
    * {@inheritdoc}
    */
-  public function execute($include_ids, $include_headers) {
+  public function execute($include_ids, $include_headers, $include_fields) {
     // TODO Inject.
     $query = \Drupal::entityQuery('taxonomy_term');
     $query->condition('vid', $this->vocabulary);
     $tids = $query->execute();
     $terms = Term::loadMultiple($tids);
     $fp = fopen('php://memory', 'rw');
+    $standardTaxonomyFields = [
+      'tid',
+      'uuid',
+      'langcode',
+      'vid',
+      'name',
+      'description',
+      'format',
+      'weight',
+      'parent_name',
+      'parent',
+      'changed',
+      'default_langcode',
+      'path',
+    ];
+    $to_export = [];
+
     if ($include_headers) {
       $to_export = ['name', 'description', 'format', 'weight', 'parent_name'];
       if ($include_ids) {
         $to_export = array_merge(['tid', 'uuid'], $to_export);
         $to_export[] = 'parent_tid';
       }
-      fputcsv($fp, $to_export);
     }
+    fputcsv($fp, $to_export);
     foreach ($terms as $term) {
       // TODO - Inject.
       $parent = reset(\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadParents($term->id()));
@@ -53,6 +70,21 @@ class ExportController {
         $term->getWeight(),
         $parent_name,
       ];
+      if ($include_fields) {
+        $field_export = [];
+        foreach ($term->getFields() as $field) {
+          if (!in_array($field->getName(), $standardTaxonomyFields)) {
+            foreach ($field->getValue() as $values) {
+              foreach ($values as $type => $value) {
+                // Skipping type here. More complicated and seems unnecessary.
+                $field_export[$field->getName()][] = $value;
+              }
+            }
+          }
+        }
+        $fields = http_build_query($field_export);
+        $to_export[] = $fields;
+      }
       if ($include_ids) {
         $to_export = array_merge([$term->id(), $term->uuid()], $to_export);
         $to_export[] = $parent_id;
diff --git a/src/Controller/ImportController.php b/src/Controller/ImportController.php
index 9411790..476f152 100644
--- a/src/Controller/ImportController.php
+++ b/src/Controller/ImportController.php
@@ -45,16 +45,24 @@ class ImportController {
     }
     foreach ($csvArray as $csvLine) {
       $keys = [];
-      if (count($csvLine) == 8) {
+      $num_of_lines = count($csvLine);
+      if (in_array($num_of_lines, [8, 9])) {
         $keys = $keys_id;
       }
-      elseif (count($csvLine) == 5) {
+      elseif (in_array($num_of_lines, [5, 6])) {
         $keys = $keys_noid;
       }
       else {
-        drupal_set_message(t('Line with "@part" could not be parsed. Incorrect number of values.', ['@part' => implode(',', $csvLine)]), 'error');
+        drupal_set_message(t('Line with "@part" could not be parsed. Incorrect number of values: @count.',
+          [
+            '@part' => implode(',', $csvLine),
+            '@count' => count($csvLine),
+          ]), 'error');
         continue;
       }
+      if (in_array($num_of_lines, [6, 9])) {
+        $keys[] = 'fields';
+      }
       $this->data[] = array_combine($keys, $csvLine);
     }
   }
@@ -115,6 +123,7 @@ class ImportController {
           ])
           ->execute();
         $new_term = Term::load($row['tid']);
+
         if (!empty($row['parent_tid'])) {
           $parent_term = Term::load($row['parent_tid']);
         }
@@ -141,6 +150,26 @@ class ImportController {
         $parent_term_id = $parent_term->id();
       }
       $new_term->set('parent', ['target_id' => $parent_term_id]);
+
+      // Import all other non-default taxonomy fields if the row is there.
+      if (isset($row['fields']) && !empty($row['fields'])) {
+        parse_str($row['fields'], $field_array);
+        if (!is_array($field_array)) {
+          drupal_set_message(t('The field data <em>@data</em> is not formatted correctly. Please use the export function.', ['@data' => $row['fields']]), 'error');
+          continue;
+        }
+        else {
+          foreach ($field_array as $field_name => $field_values) {
+            if ($new_term->hasField($field_name)) {
+              $new_term->set($field_name, $field_values);
+            }
+            else {
+              drupal_set_message(t('The field data <em>@data</em> could not be imported. Please add the appropriate fields to the vocabulary you are importing into.', ['@data' => $row['fields']]), 'warning');
+            }
+          }
+        }
+      }
+
       $new_term->save();
       $processed++;
     }
diff --git a/src/Form/ExportForm.php b/src/Form/ExportForm.php
index 9aef7f0..c64e5e2 100644
--- a/src/Form/ExportForm.php
+++ b/src/Form/ExportForm.php
@@ -52,6 +52,11 @@ class ExportForm extends FormBase {
           '#type' => 'checkbox',
           '#title' => $this->t('Include Term Headers in export.'),
         ];
+        $form['include_additional_fields'] = [
+          '#type' => 'checkbox',
+          '#title' => $this->t('Include extra fields in export.'),
+          '#description' => $this->t('Note that fields are stringified using <a href="http://www.php.net/http_build_query">http_build_query</a>'),
+        ];
         $form['submit'] = [
           '#type' => 'submit',
           '#value' => $this->t('Export'),
@@ -80,7 +85,7 @@ class ExportForm extends FormBase {
     $export = new ExportController(
       $form_state->getValue('vocabulary')
     );
-    $this->getExport = $export->execute($form_state->getValue('include_ids'), $form_state->getValue('include_headers'));
+    $this->getExport = $export->execute($form_state->getValue('include_ids'), $form_state->getValue('include_headers'), $form_state->getValue('include_additional_fields'));
     $form_state->setRebuild();
   }
 
diff --git a/src/Form/ImportForm.php b/src/Form/ImportForm.php
index 7ad5573..5fda9f3 100644
--- a/src/Form/ImportForm.php
+++ b/src/Form/ImportForm.php
@@ -74,7 +74,7 @@ class ImportForm extends FormBase implements FormInterface {
         $form['input'] = [
           '#type' => 'textarea',
           '#title' => $this->t('Input'),
-          '#description' => $this->t('Enter in the form of: <pre>"name,description,format,weight,parent_name;</pre><pre>name,description,format,weight,parent_name;"</pre> or <pre>"tid,uuid,name,description,format,weight,parent_name,parent_tid;</pre><pre>tid,uuid,name,description,format,weight,parent_name,parent_tid;"</pre> See CSV Export for example.'),
+          '#description' => $this->t('<p><strong>See CSV Export for an example.</strong></p><p>Enter in the form of: <pre>"name,description,format,weight,parent_name,[any_additional_fields];</pre><pre>name,description,format,weight,parent_name,[any_additional_fields];"</pre> or <pre>"tid,uuid,name,description,format,weight,parent_name,parent_tid,[any_additional_fields];</pre><pre>tid,uuid,name,description,format,weight,parent_name,parent_tid,[any_additional_fields];"</pre> Note that <em>[any_additional_fields]</em> are optional and are stringified using <a href="http://www.php.net/http_build_query">http_build_query</a>.</p>'),
         ];
         $vocabularies = taxonomy_vocabulary_get_names();
         $vocabularies['create_new'] = 'create_new';
